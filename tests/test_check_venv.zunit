#!/usr/bin/env zunit

@setup {

    POETRY_FOO="$HOME/.cache/pypoetry/virtualenvs/poetry-foo"
    if [[ ! -d "$POETRY_FOO" ]]; then
        echo "Creating poetry test virtualenv"
        run virtualenv "$POETRY_FOO" --python=python3 > /dev/null
    fi

    PIPENV_FOO="$HOME/.virtualenvs/pipenv-foo"
    if [[ ! -d "$PIPENV_FOO" ]]; then
        echo "Creating pipenv test virtualenv"
        run virtualenv "$PIPENV_FOO" --python=python3 > /dev/null
    fi

    echo "Creating test virtualenv"
    FOOBAR="$(mktemp -d)"
    run virtualenv "$FOOBAR/.venv" --python=python3 > /dev/null

    FOODEFAULT="$HOME/.virtualenvs/foodefault"
    if [[ ! -d "$FOODEFAULT" ]]; then
        echo "Creating default test virtualenv"
        run virtualenv "$FOODEFAULT" --python=python3 > /dev/null
    fi

    unset AUTOSWITCH_MESSAGE_FORMAT
    PYTHON_VERSION="$(python3 --version 2>&1)"

    export DISABLE_AUTOSWITCH_VENV="1"
    load "../autoswitch_virtualenv.plugin.zsh"
    TARGET="$(mktemp -d)"
    OLDPWD="$(mktemp -d)"

    LANG=".UTF-8"
}


@teardown {
    rm -rf "$POETRY_FOO"
    rm -rf "$PIPENV_FOO"
    rm -rf "$FOOBAR"
    rm -rf "$FOODEFAULT"
    rm -rf "$TARGET"
    rm -rf "$OLDPWD"
    rm -rf Pipfile
}

@test 'check_venv - Displays message on project detection (requirements.txt)' {
    PWD="$TARGET"
    touch "$TARGET/requirements.txt"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Python \e[35mvirtualenv\e[0m project detected. Run \e[35mmkvenv\e[0m to setup autoswitching"
}

@test 'check_venv - Displays message on project detection (setup.py)' {
    PWD="$TARGET"
    touch "$TARGET/setup.py"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Python \e[35mvirtualenv\e[0m project detected. Run \e[35mmkvenv\e[0m to setup autoswitching"
}

@test 'check_venv - Displays message on project detection (Pipfile)' {
    PWD="$TARGET"
    touch "$TARGET/Pipfile"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Python \e[35mpipenv\e[0m project detected. Run \e[35mmkvenv\e[0m to setup autoswitching"
}

@test 'check_venv - Displays message on project detection (poetry.lock)' {
    PWD="$TARGET"
    touch "$TARGET/poetry.lock"

    function poetry {
        echo ""
    }

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Python \e[35mpoetry\e[0m project detected. Run \e[35mmkvenv\e[0m to setup autoswitching"
}

@test 'check_venv - Displays message on project detection (setup.py + requirements.txt)' {
    PWD="$TARGET"
    touch "$TARGET/setup.py"
    touch "$TARGET/requirements.txt"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Python \e[35mvirtualenv\e[0m project detected. Run \e[35mmkvenv\e[0m to setup autoswitching"
}

@test 'check_venv - Security warning for weak writeable by group permissions' {
    PWD="$TARGET"

    mkdir "$TARGET/.venv"
    chmod 700 "$TARGET/.venv"
    chmod g+w "$TARGET/.venv"

    run check_venv

    assert $status equals 0
    assert "$lines[1]" same_as "AUTOSWITCH WARNING: Virtualenv will not be activated"
    assert "$lines[2]" is_empty
    assert "$lines[3]" same_as "Reason: Found a .venv directory with weak permission settings (720)."
    assert "$lines[4]" same_as "Run the following command to fix this: \e[35m\"chmod 700 $TARGET/.venv\"\e[0m"
}

@test 'check_venv - Security warning for weak writeable by everyone permissions' {
    PWD="$TARGET"

    mkdir "$TARGET/.venv"
    chmod 700 "$TARGET/.venv"
    chmod a+w "$TARGET/.venv"

    run check_venv

    assert $status equals 0
    assert "$lines[1]" same_as "AUTOSWITCH WARNING: Virtualenv will not be activated"
    assert "$lines[2]" is_empty
    assert "$lines[3]" same_as "Reason: Found a .venv directory with weak permission settings (722)."
    assert "$lines[4]" same_as "Run the following command to fix this: \e[35m\"chmod 700 $TARGET/.venv\"\e[0m"
}

@test 'check_venv - No security warning for readable by everyone permission' {
    PWD="$FOOBAR"

    chmod 700 "$FOOBAR/.venv"
    chmod a+r "$FOOBAR/.venv"
    AUTOSWITCH_DEFAULTENV="foodefault"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching virtualenv: \e[1m\e[35m$(basename "$FOOBAR")\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}

@test 'check_venv - No security warning for readable by group permission' {
    PWD="$FOOBAR"

    chmod 700 "$FOOBAR/.venv"
    chmod g+r "$FOOBAR/.venv"
    AUTOSWITCH_DEFAULTENV="foodefault"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching virtualenv: \e[1m\e[35m$(basename "$FOOBAR")\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}

@test 'check_venv - No security warning for readable only by owner permission' {
    PWD="$FOOBAR"

    chmod 700 "$FOOBAR/.venv"
    AUTOSWITCH_DEFAULTENV="foodefault"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching virtualenv: \e[1m\e[35m$(basename "$FOOBAR")\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}


@test 'check_venv - go to default if .venv unavailable' {
    PWD="$TARGET"
    AUTOSWITCH_DEFAULTENV="foodefault"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching default_virtualenv: \e[1m\e[35mfoodefault\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}

@test 'check_venv - activate if .venv unavailable but poetry available' {
    PWD="$TARGET/sub-directory"  # Should also work in subdirectories where poetry.lock is found
    touch "$TARGET/poetry.lock"

    # Mimic "poetry env list --full-path"
    function poetry {
        echo "$HOME/.cache/pypoetry/virtualenvs/some-other-env\n$HOME/.cache/pypoetry/virtualenvs/poetry-foo (Activated)"
    }

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching poetry: \e[1m\e[35mpoetry-foo\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}

@test 'check_venv - activate if .venv unavailable but pipenv available' {
    PWD="$TARGET/sub-directory"  # Should also work in subdirectories where Pipfile is found
    touch "$TARGET/Pipfile"

    function pipenv {
        echo "$PIPENV_FOO"
    }

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching pipenv: \e[1m\e[35mpipenv\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}


@test 'check_venv - deactivate if neither .venv nor pipenv available' {
    PWD="$TARGET"
    VIRTUAL_ENV="$(realpath "$(basename "$TARGET")")"
    unset AUTOSWITCH_DEFAULTENV
    function deactivate {
    }

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Deactivating: \e[1m\e[35m$(basename "$TARGET")\e[0m"
}

@test 'check_venv - deactivate if neither .venv nor pipenv available (previous dir is pipenv)' {
    PWD="$TARGET"
    touch "$OLDPWD/Pipfile"

    VIRTUAL_ENV="foo-bar-defa23"
    unset AUTOSWITCH_DEFAULTENV
    function deactivate {
    }

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Deactivating: \e[1m\e[35mfoo-bar\e[0m"
}

@test 'check_venv - works as intended with .venv available' {
    PWD="$TARGET"

    virtualenv "$TARGET/.venv" --python=python3
    chmod 700 "$TARGET/.venv"

    run check_venv

    assert $status equals 0
    assert "$output" same_as "Switching virtualenv: \e[1m\e[35m$(basename "$TARGET")\e[0m \e[32m[üêç$PYTHON_VERSION]\e[0m"
}
