#!/usr/bin/env zunit

@setup {

    export DISABLE_AUTOSWITCH_VENV="1"
    load "../autoswitch_virtualenv.plugin.zsh"
    unset AUTOSWITCH_DEFAULT_REQUIREMENTS
    TARGET="$(mktemp -d)"
    cd "$TARGET"

    function poetry {
        echo 'poetry' $@
    }

    function pipenv {
        echo 'pipenv' $@
    }

    function deactivate {
        echo 'deactivate'
    }
}

@teardown {
    rm -rf "$TARGET"
}


@test 'rmvenv - shows warning if no .venv present' {
    run rmvenv

    assert $state equals 0
    assert "$output" same_as "No .venv file in the current directory!"
}


@test 'rmvenv - removes .venv if present' {
    # lightweight simulation of creating a virtualenv
    mkdir -p .venv

    run rmvenv

    assert $state equals 0
    assert "$output" same_as "Removing \e[35m$(basename "$TARGET")\e[0m..."
    test ! -d .venv
}

@test 'rmvenv - removes .venv if present with function' {
    # lightweight simulation of creating a virtualenv
    mkdir -p .venv

    # Interfere with rm executable (in normal use alias or function would do the same).
    function rm(){ : }

    run rmvenv

    assert $state equals 0
    assert "$output" same_as "Removing \e[35m$(basename "$TARGET")\e[0m..."
    test ! -d .venv
}

@test 'rmvenv - removes .venv and deactivates if currently active' {
    run mkvenv

    run rmvenv

    assert $state equals 0
    assert "$output" same_as "Removing \e[35m$(basename "$TARGET")\e[0m..."
    assert "$VIRTUAL_ENV" different_to "$TARGET/.venv"
    test ! -d .venv
}

@test 'rmvenv - uninstalls poetry project' {
    touch "poetry.lock"

    run rmvenv

    assert $state equals 0
    assert "$lines[1]" same_as "deactivate"
    assert "$lines[2]" same_as "poetry env remove poetry run which python"
}


@test 'rmvenv - uninstalls pipenv project' {
    touch "Pipfile"

    run rmvenv

    assert $state equals 0
    assert "$lines[1]" same_as "deactivate"
    assert "$lines[2]" same_as "pipenv --rm"
}
